@prefix xml: <http://www.w3.org/XML/1998/namespace> . 
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . 
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> . 
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> . 
@prefix rr: <http://www.w3.org/ns/r2rml#> . 
@prefix foaf: <http://xmlns.com/foaf/0.1/> . 
@prefix country: <http://eulersharp.sourceforge.net/2003/03swap/countries#> . 
@prefix recipes: <http://ontology.wearehungry.be#> . 

	
<#RecipeContainsIngredientProperty>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT (md5(CONCAT(recipeName, recipeNationality))) as hashedRecipe,	
    (md5(ingredientName)) as hashedIngredient	
    FROM recipe_contains_ingredient;	
     """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Recipe ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashedRecipe}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:containsIngredient ;	
	 rr:objectMap  [	
		 rr:template  "http://data.wearehungry.be#Ingredient{hashedIngredient}" ;	
		]; 	
 ];	
.	
	
<#PriceIngredientProperties>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT name, price	
    FROM Ingredients;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:termType  rr:BlankNode ;	
	 rr:template  "_:BlankIngredientPriceNode{name}" ;	
	 rr:class  recipes:Price ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:priceValue ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "price" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:hasUnit ;	
	 rr:objectMap  [	
		 rr:template  "_:BlankIngredientPriceUnitNode{name}" ;	
		 rr:termType  rr:BlankNode ;	
		]; 	
 ];	
.	
	
<#CookingTools>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery  "SELECT CookingTools.name as toolName FROM CookingTools" ;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:CookingTool ;	
	 rr:template  "http://data.wearehungry.be#Tool{toolName}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  rdfs:label ;	
	 rr:predicate  foaf:name ;	
	 rr:objectMap  [	
		 rr:column  "toolName" ;	
		]; 	
 ];	
.	
	
<#RecipesIsServedInProperty>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT	
      r.name,	
      r.nationality,	
      (md5(CONCAT(r.name, r.nationality))) as hashed,	
      SUBSTRING_INDEX(SUBSTRING_INDEX(r.mealTime, ',', numbers.n), ',', -1) mealTime	
    FROM	
      (SELECT 1 n UNION ALL SELECT 2	
       UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5) numbers INNER JOIN Recipes r	
      ON CHAR_LENGTH(r.mealTime)	
         -CHAR_LENGTH(REPLACE(r.mealTime, ',', ''))>=numbers.n-1	
    ORDER BY	
      r.name, n;	
       """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
	 rr:class  recipes:Recipe ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:isServedIn ;	
	 rr:objectMap  [	
		 rr:template  "http://ontology.wearehungry.be#{mealTime}" ;	
		]; 	
 ];	
.	
	
<#OtherTypeRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType Not In ('soup', 'salad', 'dessert', 'drink', 'sauce', 'fastfood');	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Recipe ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
 ];	
.	
	
<#RecipeContainsAmountIngredientProperty>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT (md5(CONCAT(recipeName, recipeNationality))) as hashedRecipe,	
    (md5(CONCAT(recipeName, recipeNationality, ingredientName, unit, amount))) as blankHashed	
    FROM recipe_contains_ingredient;	
     """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Recipe ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashedRecipe}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:contains ;	
	 rr:objectMap  [	
		 rr:template  "_:BlankAmountIngredientNode{blankHashed}" ;	
		 rr:termType  rr:BlankNode ;	
		]; 	
 ];	
.	
	
<#PreparationSteps>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT (md5(CONCAT(name, nationality, p.orderStep))) as hashed,	
            p.orderStep AS os,	
            p.description AS inst	
    FROM Recipes	
    INNER JOIN preparation_steps p ON	
        Recipes.name = p.recipeName	
        AND	
        Recipes.nationality = p.recipeNationality;	
     """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#PreparationStep{hashed}" ;	
	 rr:class  recipes:PreparationStep ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:order ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:positiveInteger ;	
		 rr:column  "os" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:instruction ;	
	 rr:objectMap  [	
		 rr:column  "inst" ;	
		 rr:datatype  xsd:string ;	
		]; 	
 ];	
.	
	
<#CommenPropIngredients>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT name, (md5(name)) as hashed, energy, fat, glucide, dietryFiber, protein, sal, price	
		FROM Ingredients;	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Ingredient ;	
	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  foaf:name ;	
	 rr:predicate  rdfs:label ;	
	 rr:objectMap  [	
		 rr:column  "name" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:energy ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "energy" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:fat ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "fat" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:glucide ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "glucide" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:dietryFiber ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "dietryFiber" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:sal ;	
	 rr:objectMap  [	
		 rr:column  "sal" ;	
		 rr:datatype  xsd:double ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:protein ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "protein" ;	
		]; 	
 ];	
.	
	
<#blankNodesForPriceClass>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT (md5(name)) as hashed, name	
    FROM Ingredients;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Ingredient ;	
	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:costs ;	
	 rr:objectMap  [	
		 rr:termType  rr:BlankNode ;	
		 rr:template  "_:BlankIngredientPriceNode{name}" ;	
		]; 	
 ];	
.	
	
<#IngredientSeasonProperty>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT	
      (md5(i.name)) as hashed,	
      SUBSTRING_INDEX(SUBSTRING_INDEX(i.season, ',', numbers.n), ',', -1) season	
    FROM	
      (SELECT 1 n UNION ALL SELECT 2	
    UNION ALL SELECT 3 UNION ALL SELECT 4 ) numbers INNER JOIN Ingredients i	
    ON CHAR_LENGTH(i.season)	
      -CHAR_LENGTH(REPLACE(i.season, ',', ''))>=numbers.n-1	
    ORDER BY	
    i.name, n;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Ingredient ;	
	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:inSeason ;	
	 rr:objectMap  [	
		 rr:template  "http://ontology.wearehungry.be#{season}" ;	
		]; 	
 ];	
.	
	
<#RecipeToolsProperty>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT (md5(CONCAT(name, nationality))) as hashed,	
            ct.cookingToolName AS tn	
    FROM Recipes	
    INNER JOIN recipe_use_cookingtool ct ON	
        Recipes.name = ct.recipeName	
        AND	
        Recipes.nationality = ct.recipeNationality;	
     """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Recipe ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:uses ;	
	 rr:objectMap  [	
		 rr:template  "http://data.wearehungry.be#Tool{tn}" ;	
		]; 	
 ];	
.	
	
<#FishIngredients>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(name)) as hashed	
		FROM Ingredients	
    WHERE type='fish';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
	 rr:class  recipes:Fish ;	
 ];	
.	
	
<#CommonPropRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT name, (md5(CONCAT( name,  nationality))) as hashed, preparationTime, quantityPersons, nationality	
		FROM Recipes	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Recipe ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  rdfs:label ;	
	 rr:predicate  foaf:name ;	
	 rr:objectMap  [	
		 rr:column  "name" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:preparationTime ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:positiveInteger ;	
		 rr:column  "preparationTime" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:quantityPerson ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:positiveInteger ;	
		 rr:column  "quantityPersons" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:originCountry ;	
	 rr:objectMap  [	
		 rr:template  "http://eulersharp.sourceforge.net/2003/03swap/countries#{nationality}" ;	
		]; 	
 ];	
.	
	
<#SaladRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType ='salad';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
	 rr:class  recipes:Salad ;	
 ];	
.	
	
<#RecipePreparationStepsProperty>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT (md5(CONCAT(name, nationality, p.orderStep))) as hashedStep,	
           (md5(CONCAT(name, nationality))) as hashedRecipe	
    FROM Recipes	
    INNER JOIN preparation_steps p ON	
        Recipes.name = p.recipeName	
        AND	
        Recipes.nationality = p.recipeNationality;	
     """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Recipe ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashedRecipe}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:has ;	
	 rr:objectMap  [	
		 rr:template  "http://data.wearehungry.be#PreparationStep{hashedStep}" ;	
		]; 	
 ];	
.	
	
<#RecipesServedAsProperty>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
    SELECT	
      r.name,	
      r.nationality,	
      (md5(CONCAT(r.name, r.nationality))) as hashed,	
      SUBSTRING_INDEX(SUBSTRING_INDEX(r.servedAs, ',', numbers.n), ',', -1) servedAs	
    FROM	
      (SELECT 1 n UNION ALL SELECT 2) numbers INNER JOIN Recipes r	
      ON CHAR_LENGTH(r.servedAs)	
         -CHAR_LENGTH(REPLACE(r.servedAs, ',', ''))>=numbers.n-1	
    ORDER BY	
      r.name, n;	
       """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
	 rr:class  recipes:Recipe ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:servedAs ;	
	 rr:objectMap  [	
		 rr:template  "http://ontology.wearehungry.be#{servedAs}" ;	
		]; 	
 ];	
.	
	
<#AmountIngredientProperties>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
  SELECT (md5(CONCAT(recipeName, recipeNationality))) as hashedRecipe,	
  (md5(CONCAT(recipeName, recipeNationality, ingredientName, unit, amount))) as blankHashed,	
  (md5(ingredientName)) as hashedIngredient,	
  unit,	
  amount	
  FROM recipe_contains_ingredient;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:termType  rr:BlankNode ;	
	 rr:template  "_:BlankAmountIngredientNode{blankHashed}" ;	
	 rr:class  recipes:AmountIngredient ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:hasUnit ;	
	 rr:objectMap  [	
		 rr:template  "_:BlankUnitNode{blankHashed}" ;	
		 rr:termType  rr:BlankNode ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:usesIngredient ;	
	 rr:objectMap  [	
		 rr:template  "http://data.wearehungry.be#Ingredient{hashedIngredient}" ;	
		]; 	
 ];	
.	
	
<#DrinkRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType ='drink';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
	 rr:class  recipes:Drink ;	
 ];	
.	
	
<#SauceRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType ='sauce';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Sauce ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
 ];	
.	
	
<#MeatIngredients>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(name)) as hashed	
		FROM Ingredients	
    WHERE type='meat';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
	 rr:class  recipes:Meat ;	
 ];	
.	
	
<#SoupRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType ='soup';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
	 rr:class  recipes:Soup ;	
 ];	
.	
	
<#PriceIngredientUnitProperties>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
      SELECT name, price, unit, if(unit LIKE 'grams', 1000.01, 1.01) as unitValues	
      FROM Ingredients;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:termType  rr:BlankNode ;	
	 rr:class  recipes:Unit ;	
	 rr:template  "_:BlankIngredientPriceUnitNode{name}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:unitValue ;	
	 rr:objectMap  [	
		 rr:datatype  xsd:double ;	
		 rr:column  "unitValues" ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:measure ;	
	 rr:objectMap  [	
		 rr:template  "http://ontology.wearehungry.be#{unit}" ;	
		]; 	
 ];	
.	
	
<#OtherIngredients>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(name)) as hashed	
		FROM Ingredients	
    WHERE type Not In ('meat', 'fish');	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
	 rr:class  recipes:Ingredient ;	
 ];	
.	
	
<#BlankAmountIngredientUnitProperties>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
  SELECT (md5(CONCAT(recipeName, recipeNationality))) as hashedRecipe,	
  (md5(CONCAT(recipeName, recipeNationality, ingredientName, unit, amount))) as blankHashed,	
  unit,	
  amount	
  FROM recipe_contains_ingredient;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:termType  rr:BlankNode ;	
	 rr:class  recipes:Unit ;	
	 rr:template  "_:BlankUnitNode{blankHashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:unitValue ;	
	 rr:objectMap  [	
		 rr:column  "amount" ;	
		 rr:datatype  xsd:double ;	
		]; 	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:measure ;	
	 rr:objectMap  [	
		 rr:template  "http://ontology.wearehungry.be#{unit}" ;	
		]; 	
 ];	
.	
	
<#FastFoodRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType ='fastfood';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:FastFood ;	
	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
 ];	
.	
	
<#IngredientTastesFlavor>	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
        SELECT (md5(T.name)) as hashed, T.flavor as taste	
        FROM	
        (SELECT	
          i.name,	
          SUBSTRING_INDEX(SUBSTRING_INDEX(i.flavor, ',', numbers.n), ',', -1) flavor	
        FROM	
        (SELECT 1 n UNION ALL SELECT 2	
          UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5) numbers INNER JOIN Ingredients i	
          ON CHAR_LENGTH(i.flavor)	
            -CHAR_LENGTH(REPLACE(i.flavor, ',', ''))>=numbers.n-1	
            ORDER BY	
            i.name, n	
        ) AS T	
        WHERE T.flavor IS NOT Null;	
   """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:class  recipes:Ingredient ;	
	 rr:template  "http://data.wearehungry.be#Ingredient{hashed}" ;	
 ];	
	
 rr:predicateObjectMap [ 	
 	 rr:predicate  recipes:tastes ;	
	 rr:objectMap  [	
		 rr:template  "http://ontology.wearehungry.be#{taste}" ;	
		]; 	
 ];	
.	
	
<#DessertRecipes>	
 rdf:type  rr:TriplesMap ;	
	
 rr:logicalTable [ 	
 	 rr:sqlQuery """ 	
		SELECT (md5(CONCAT( name,  nationality))) as hashed	
		FROM Recipes	
    WHERE recipeType ='dessert';	
	 """;	
 ];	
	
 rr:subjectMap [ 	
 	 rr:template  "http://data.wearehungry.be#Recipe{hashed}" ;	
	 rr:class  recipes:Dessert ;	
 ];	
.	
