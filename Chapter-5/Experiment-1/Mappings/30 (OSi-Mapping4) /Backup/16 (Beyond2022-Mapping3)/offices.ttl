@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cidoc: <http://erlangen-crm.org/current/> .

@prefix b2022: <https://ont.beyond2022.ie/ontology#> .

<#OfficeAppellation>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT X.ID, X.LABEL, Y.COUNTRY 
		FROM (
			SELECT ID, OFFICENAME AS LABEL FROM DATA WHERE OFFICENAME IS NOT NULL 
			UNION 
			WITH RECURSIVE SYNONYMSSPLITTED(ID, SYNONYMS, REST) AS (
				SELECT ID, NULL, SYNONYMS || ';'
				FROM (SELECT ID, SYNONYMS FROM DATA) WHERE SYNONYMS IS NOT NULL
	  			UNION ALL
	  		  	SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SYNONYMSSPLITTED WHERE REST <> ''
			) SELECT ID, SYNONYMS AS LABEL FROM SYNONYMSSPLITTED WHERE SYNONYMS IS NOT NULL
		) X INNER JOIN DATA Y ON X.ID = Y.ID 
		""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/office-appellation/{COUNTRY}/{LABEL}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:template "{LABEL}" ; rr:termType rr:Literal ; ] ;
	] ;
	.

<#Office>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		ID,
		OFFICENAME,
		COUNTRY,
		TYPE1,
		TYPE2,
		TYPE3,
		TYPE4,
		COMMENT
	FROM
		DATA;
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/office/{COUNTRY}/{OFFICENAME}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Office ; # Note that it is implied that this class is an instance of cidoc:E55_Type
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:objectMap [ rr:template "https://ont.beyond2022.ie/ontology#{TYPE1}" ] ;
		rr:objectMap [ rr:template "https://ont.beyond2022.ie/ontology#{TYPE2}" ] ;
		rr:objectMap [ rr:template "https://ont.beyond2022.ie/ontology#{TYPE3}" ] ;
		rr:objectMap [ rr:template "https://ont.beyond2022.ie/ontology#{TYPE4}" ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P1_is_identified_by ;
		rr:objectMap [
			rr:parentTriplesMap <#OfficeAppellation> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P3_has_note ;
		rr:objectMap [
			rr:column "COMMENT" ;
			rr:datatype xsd:string ;
		] ;
	] ;

.

<#SubjectTo>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		F.ID AS FROMID,
		F.OFFICENAME AS FROMNAME,
		F.COUNTRY AS COUNTRY,
		CASEWHEN(REGEXP_LIKE(D.SUBJECTTO, '^http(s)?://'), D.SUBJECTTO, NULL) AS TO_URI,
		CASEWHEN(REGEXP_LIKE(D.SUBJECTTO, '^http(s)?://'), NULL, D.SUBJECTTO) AS TOID,
		COALESCE(T.OFFICENAME, D.SUBJECTTO) AS TONAME
	FROM
		(
			WITH recursive splittedsubject (id, subjectto, rest) AS 
			( 
				SELECT id, NULL, subjectto || ';' FROM  (SELECT id, subjectto FROM data WHERE subjectto IS NOT NULL) 
				UNION ALL 
				SELECT id, trim(substr(rest, 0, instr(rest, ';') - 1)), substr(rest, instr(rest, ';') + 1) FROM splittedsubject WHERE rest <> '' 
			)
			SELECT DISTINCT id, subjectto FROM splittedsubject WHERE subjectto IS NOT NULL
		) AS D
		JOIN DATA F ON D.ID = F.ID
		LEFT OUTER JOIN DATA T ON D.SUBJECTTO = T.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/authority/{COUNTRY}/{FROMNAME}-{TONAME}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Authority ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:subjects ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "FROMID" ;
            	rr:parent "ID" ;
        	];
		] ;
    ] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:represented_by ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "TOID" ;
            	rr:parent "ID" ;
        	];
		] ;
		rr:objectMap [
			rr:column "TO_URI" ;
			rr:termType rr:IRI ;
		] ;
    ] ;

.

<#COUNCILS>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		F.ID AS FROMID,
		F.OFFICENAME AS FROMNAME,
		F.COUNTRY AS COUNTRY,
		CASEWHEN(REGEXP_LIKE(D.COUNSELS, '^http(s)?://'), D.COUNSELS, NULL) AS TO_URI,
		CASEWHEN(REGEXP_LIKE(D.COUNSELS, '^http(s)?://'), NULL, D.COUNSELS) AS TOID,
		COALESCE(T.OFFICENAME, D.COUNSELS) AS TONAME
	FROM
		(
			WITH recursive splittedcounsels (id, counsels, rest) AS 
			( 
				SELECT id, NULL, counsels || ';' FROM  (SELECT id, counsels FROM data WHERE counsels IS NOT NULL) 
				UNION ALL 
				SELECT id, trim(substr(rest, 0, instr(rest, ';') - 1)), substr(rest, instr(rest, ';') + 1) FROM splittedcounsels WHERE rest <> '' 
			)
			SELECT DISTINCT id, counsels FROM splittedcounsels WHERE counsels IS NOT NULL
		) AS D
		JOIN DATA F ON D.ID = F.ID
		LEFT OUTER JOIN DATA T ON D.COUNSELS = T.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/counsels/{COUNTRY}/{FROMNAME}-{TONAME}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Council ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:counselor ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "FROMID" ;
            	rr:parent "ID" ;
        	];
		] ;
    ] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:counsellee ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "TOID" ;
            	rr:parent "ID" ;
        	];
		] ;
		rr:objectMap [
			rr:column "TO_URI" ;
			rr:termType rr:IRI ;
		] ;
    ] ;

.

<#ORGANISATIONOFOFFICE>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		D.ID,
		D.ORGANISATION,
		F.OFFICENAME,
		F.COUNTRY,
		CASEWHEN(REGEXP_LIKE(D.ORGANISATION, '^http(s)?://'), D.ORGANISATION, NULL) AS ORGANISATION_URI,
		CASEWHEN(REGEXP_LIKE(D.ORGANISATION, '^http(s)?://'), NULL, D.ORGANISATION) AS ORGANISATION_LABEL
	FROM
		(
			WITH RECURSIVE SPLITTEDORGANISATIONS (id, ORGANISATION, rest) AS 
			( 
				SELECT id, NULL, ORGANISATION || ';' FROM  (SELECT id, ORGANISATION FROM data WHERE ORGANISATION IS NOT NULL) 
				UNION ALL 
				SELECT id, trim(substr(rest, 0, instr(rest, ';') - 1)), substr(rest, instr(rest, ';') + 1) FROM SPLITTEDORGANISATIONS WHERE rest <> '' 
			)
			SELECT DISTINCT id, ORGANISATION FROM SPLITTEDORGANISATIONS WHERE ORGANISATION IS NOT NULL
		) AS D
		JOIN DATA F ON D.ID = F.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/falls-under/{COUNTRY}/{OFFICENAME}-{ORGANISATION}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Governance ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:subject ;
		rr:objectMap [
 	       rr:template "https://kb.beyond2022.ie/organisation/{COUNTRY}/{ORGANISATION_LABEL}" ;
		] ;
		rr:objectMap [
			rr:column "ORGANISATION_URI" ;
			rr:termType rr:IRI ;
		] ;
    ] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:object ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "ID" ;
            	rr:parent "ID" ;
        	];
		] ;
    ] ;

.

<#OFFICEOVERSEENBYORGANISATION>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		D.ID,
		D.OVERSEENBY,
		F.OFFICENAME,
		F.COUNTRY,
		CASEWHEN(REGEXP_LIKE(D.OVERSEENBY, '^http(s)?://'), D.OVERSEENBY, NULL) AS OVERSEENBY_URI,
		CASEWHEN(REGEXP_LIKE(D.OVERSEENBY, '^http(s)?://'), NULL, D.OVERSEENBY) AS OVERSEENBY_LABEL
	FROM
		(
			WITH RECURSIVE splittedoverseen (id, OVERSEENBY, rest) AS 
			( 
				SELECT id, NULL, OVERSEENBY || ';' FROM  (SELECT id, OVERSEENBY FROM data WHERE OVERSEENBY IS NOT NULL) 
				UNION ALL 
				SELECT id, trim(substr(rest, 0, instr(rest, ';') - 1)), substr(rest, instr(rest, ';') + 1) FROM splittedoverseen WHERE rest <> '' 
			)
			SELECT DISTINCT id, OVERSEENBY FROM splittedoverseen WHERE OVERSEENBY IS NOT NULL
		) AS D
		JOIN DATA F ON D.ID = F.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/supervision/{COUNTRY}/{OFFICENAME}-{OVERSEENBY}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Supervision ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:subject ;
		rr:objectMap [
 	       rr:template "https://kb.beyond2022.ie/office/{COUNTRY}/{OVERSEENBY_LABEL}" ;
		] ;
		rr:objectMap [
			rr:column "OVERSEENBY_URI" ;
			rr:termType rr:IRI ;
		] ;
    ] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:object ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "ID" ;
            	rr:parent "ID" ;
        	];
		] ;
    ] ;

.

<#PLACEOFORGANISATION>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		D.ID,
		D.PLACE,
		F.OFFICENAME,
		F.COUNTRY,
		CASEWHEN(REGEXP_LIKE(D.PLACE, '^http(s)?://'), D.PLACE, NULL) AS PLACE_URI,
		CASEWHEN(REGEXP_LIKE(D.PLACE, '^http(s)?://'), NULL, D.PLACE) AS PLACE_LABEL
	FROM
		(
			WITH RECURSIVE placenamesplitted (id, PLACE, rest) AS 
			( 
				SELECT id, NULL, PLACE || ';' FROM  (SELECT id, PLACE FROM data WHERE PLACE IS NOT NULL) 
				UNION ALL 
				SELECT id, trim(substr(rest, 0, instr(rest, ';') - 1)), substr(rest, instr(rest, ';') + 1) FROM placenamesplitted WHERE rest <> '' 
			)
			SELECT DISTINCT id, PLACE FROM placenamesplitted WHERE PLACE IS NOT NULL
		) AS D
		JOIN DATA F ON D.ID = F.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/location/{COUNTRY}/{OFFICENAME}-{PLACE}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Location ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:subject ;
		rr:objectMap [
			rr:template "https://kb.beyond2022.ie/place/{COUNTRY}/{PLACE_LABEL}" ;
		] ;
		rr:objectMap [
			rr:column "PLACE_URI" ;
			rr:termType rr:IRI ;
		] ;
    ] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to, b2022:object ;
		rr:objectMap [
 	       rr:parentTriplesMap <#Office> ;
    	    rr:joinCondition [
            	rr:child "ID" ;
            	rr:parent "ID" ;
        	];
		] ;
    ] ;

.

<#SOURCE>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT
			D.ID,
			CONCAT(D.SOURCE, ', pp. ' || E.PAGENUMBERS) AS REFERENCE
		FROM DATA D 
		LEFT OUTER JOIN 
		(
			WITH RECURSIVE SPLITTEDPAGENUMBERS (ID, PAGENUMBERS, REST) AS 
			( 
				SELECT ID, NULL, PAGENUMBERS || ';' FROM  (SELECT ID, PAGENUMBERS FROM DATA WHERE PAGENUMBERS IS NOT NULL) 
				UNION ALL 
				SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDPAGENUMBERS WHERE REST <> '' 
			) SELECT DISTINCT ID, PAGENUMBERS FROM SPLITTEDPAGENUMBERS WHERE PAGENUMBERS IS NOT NULL
		) E ON D.ID = E.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{REFERENCE}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "REFERENCE" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION1URI>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION1 FROM DATA WHERE REGEXP_LIKE(CITATION1, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:column "CITATION1" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION1TEXT>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION1 FROM DATA WHERE CITATION1 IS NOT NULL AND NOT REGEXP_LIKE(CITATION1, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{CITATION1}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "CITATION1" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION2URI>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION2 FROM DATA WHERE REGEXP_LIKE(CITATION2, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:column "CITATION2" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION2TEXT>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION2 FROM DATA WHERE CITATION2 IS NOT NULL AND NOT REGEXP_LIKE(CITATION2, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{CITATION2}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "CITATION2" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION3URI>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION3 FROM DATA WHERE REGEXP_LIKE(CITATION3, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:column "CITATION3" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION3TEXT>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION3 FROM DATA WHERE CITATION3 IS NOT NULL AND NOT REGEXP_LIKE(CITATION3, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{CITATION3}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "CITATION3" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.